{"version":3,"sources":["webpack://Editor/./src/Editor.svelte","webpack://Editor/./src/App.svelte"],"names":[],"mappings":"AAmNI,4CAAe,iBACO,CAClB,UAAW,CACX,WAAY,CACZ,eAAgB,CAChB,wCAAyC,CAC5C,0CAEY,iBACS,CAClB,WAAY,CACZ,UAAW,CAEX,iBAAkB,CAClB,gBAAiB,CACjB,2BAA4B,CAC/B,0CAEY,WACG,CACZ,WAAY,CACf,0CAEY,oBACY,CACxB,wCAEU,gBACU;AA9OzB,67XAA67X,C;ACEj7X,UAAY,WACJ,CACZ,QAAS,CACT,SAAU;AALlB,ikBAAikB,C","file":"styles.css","sourcesContent":["<script>\n    import { onMount } from 'svelte';\nimport { CommandStack } from './command';\n    import { Point } from './geometry';\n    import { createModel, createLifeLine, createMessage, AddLifeLineCommand, AddMessageCommand } from './model';\n    import { Renderer } from './renderer';\n    import { DiagramContext, IdleState } from './states';\n\n    let width;\n    let height;\n    let context;\n\n    let model;\n    let commandStack;\n    let renderer;\n    let state;\n    let diagramContext;\n\n    let view = {\n        lifeLines: [],\n        messages: [],\n        pendingMessage: null\n    };\n    let paletteState = {\n        canUndo: false,\n        canRedo: false\n    }\n\n    const style = {\n        lifeLineHeadTextSize: \"24px\",\n        lifeLineHeadMargin: 10,\n        minHeadHeight: 60,\n        topMargin: 20,\n        leftMargin: 20,\n        minHeadGap: 20,\n        messageTextSize: \"18px\",\n        messageStartGap: 80,\n        messageGap: 60,\n        messageMargin: 15\n    };\n\n    onMount(() => {\n        const canvas = document.createElement(\"canvas\");\n        context = canvas.getContext(\"2d\");\n\n        model = createModel();\n\n        renderer = new Renderer(style, {\n            measure: measureText\n        });\n\n        commandStack = new CommandStack();\n\n        diagramContext = new DiagramContext(commandStack, model, renderer, (v) => {\n            view = v;\n            paletteState = {\n                canUndo: commandStack.canUndo(),\n                canRedo: commandStack.canRedo()\n            };\n        });\n        \n        state = new IdleState(diagramContext);\n\n        diagramContext.refresh(true);\n    });\n    \n    function measureText(text, textSize) {\n        context.font = textSize + \" arial\";\n        const metrics = context.measureText(text);\n        return metrics;\n    }\n\n    function mouseDown(e) {\n        const mousePoint = new Point(e.clientX, e.clientY)\n        state = state.mouseDown(mousePoint);\n    }\n\n    function mouseUp(e) {\n        const mousePoint = new Point(e.clientX, e.clientY)\n        state = state.mouseUp(mousePoint);\n    }\n\n    function mouseMove(e) {\n        const mousePoint = new Point(e.clientX, e.clientY)\n        state = state.mouseMove(mousePoint);\n    }\n\n    function undoAction() {\n        commandStack.undo();\n        diagramContext.refresh(true);\n    }\n\n    function redoAction() {\n        commandStack.redo();\n        diagramContext.refresh(true);\n    }\n\n    function addLifeLineAction() {\n        commandStack.execute(new AddLifeLineCommand(model, createLifeLine()));\n        diagramContext.refresh(true);\n    }\n\n    function addMessageAction() {\n        if (model.lifeLines.length >= 2) {\n            commandStack.execute(new AddMessageCommand(model, createMessage(model.lifeLines)));\n            diagramContext.refresh(true);\n        }\n    }\n\n</script>\n\n<div class=\"container\" bind:clientWidth={width} bind:clientHeight={height}>\n    <div on:mousedown={mouseDown} on:mouseup={mouseUp} on:mousemove={mouseMove}>\n    <svg {width} {height} viewBox=\"0 0 {width} {height}\">\n        <defs>\n            <marker id=\"triangle\" viewBox=\"0 0 10 10\"\n                  refX=\"10\" refY=\"5\"\n                  markerUnits=\"strokeWidth\"\n                  markerWidth=\"10\" markerHeight=\"10\"\n                  orient=\"auto-start-reverse\">\n                <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"black\"/>\n            </marker>\n        </defs>\n        <style>\n            .select-marker {\n                stroke: none;\n            }\n            .select-marker.hover {\n                stroke: #55CCFF;\n            }\n            .select-marker.selected {\n                stroke: #55CC99;\n            }\n            .point-marker {\n                fill: none;\n            }\n            .point-marker.hover {\n                fill: #55CCFF;\n            }\n        </style>\n        {#each view.lifeLines as lifeLine}\n        <g transform=\"translate({lifeLine.x},{lifeLine.y})\">\n            <rect width=\"{lifeLine.width}\" height=\"{lifeLine.headHeight}\" stroke=\"black\" fill=\"none\"/>\n            <text dx={lifeLine.width/2} dy={lifeLine.headHeight/2+10} text-anchor=\"middle\" font-size=\"{lifeLine.textSize}\">{lifeLine.text}</text>\n            <line x1={lifeLine.width/2} y1={lifeLine.headHeight}\n                x2={lifeLine.width/2} y2={lifeLine.headHeight + lifeLine.lineHeight}\n                stroke-dasharray=\"4\"\n                stroke=\"black\"/>\n            <rect class=\"select-marker\" class:hover={lifeLine.hover} x={-10} y={-10}\n                    width={lifeLine.markerBounds.width} height={lifeLine.markerBounds.height}\n                    rx=\"10\" ry=\"10\"\n                    fill=\"none\" stroke-dasharray=\"4\" stroke-width=\"2\"/>\n        </g>\n        {/each}\n        \n        {#each view.messages as message}\n        {#if !message.editing}\n        <g>\n            <line x1={message.from.lifeLine.centerX()} y1={message.y}\n                x2={message.to.lifeLine.centerX()} y2={message.y} stroke=\"black\" marker-end=\"url(#triangle)\"/>\n            {#if message.reversed}\n            <text x={message.to.lifeLine.centerX()+style.messageMargin} y={message.y-7} text-anchor=\"start\" font-size=\"{message.textSize}\">{message.text}</text>\n            {:else}\n            <text x={message.to.lifeLine.centerX()-style.messageMargin} y={message.y-7} text-anchor=\"end\" font-size=\"{message.textSize}\">{message.text}</text>\n            {/if}\n            <circle class=\"point-marker\" class:hover={message.from.hover}\n                cx={message.from.center().x} cy={message.from.center().y} r=\"6\" />\n            <circle class=\"point-marker\" class:hover={message.to.hover}\n                cx={message.to.center().x} cy={message.to.center().y} r=\"6\" />\n            <rect class=\"select-marker\" class:hover={!message.selected && message.hover} class:selected={message.selected}\n                    x={message.markerBounds.x} y={message.markerBounds.y}\n                    width={message.markerBounds.width} height={message.markerBounds.height}\n                    rx=\"10\" ry=\"10\" fill=\"none\" stroke-dasharray=\"4\" stroke-width=\"2\" />\n        </g>\n        {/if}\n        {/each}\n        {#if view.pendingMessage}\n        <line x1={view.pendingMessage.from} y1={view.pendingMessage.y}\n                x2={view.pendingMessage.to} y2={view.pendingMessage.y} fill=\"none\" stroke=\"black\" marker-end=\"url(#triangle)\" />\n            {#if view.pendingMessage.hoverOther}\n            <circle class=\"point-marker hover\" cx={view.pendingMessage.hoverOther.centerX()} cy={view.pendingMessage.y} r=\"6\" />\n            {/if}\n        {/if}\n        {#if view.pendingLifeLine}\n        <line x1={view.pendingLifeLine.x} y1={view.pendingLifeLine.y}\n            x2={view.pendingLifeLine.x} y2={view.pendingLifeLine.y + view.pendingLifeLine.height}\n            stroke-dasharray=\"4\"\n            stroke-width={view.pendingLifeLine.snap ? 3 : 1}\n            stroke={view.pendingLifeLine.snap ? \"green\" : \"#55CCFF\"}/>\n        {/if}\n    </svg>\n    </div>\n    <div class=\"palette\">\n        <ul>\n            <li>\n                <button disabled={!paletteState.canUndo} on:click={undoAction}>Undo</button>\n            </li>\n            <li>\n                <button disabled={!paletteState.canRedo} on:click={redoAction}>Redo</button>\n            </li>\n            <li class=\"spacer\">\n                <button on:click={addLifeLineAction}>Add LifeLine</button>\n            </li>\n            <li>\n                <button on:click={addMessageAction}>Add Message</button>\n            </li>\n        </ul>\n    </div>\n</div>\n\n<style>\n    div.container {\n        position: relative;\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        font-family: Arial, Helvetica, sans-serif;\n    }\n\n    div.palette {\n        position: absolute;\n        bottom: 20px;\n        left: 100px;\n        /* border: 1px solid black; */\n        border-radius: 5px;\n        background: white;\n        box-shadow: 2px 2px 5px gray;\n    }\n\n    .palette ul {\n        padding: 0px;\n        margin: 10px;\n    }\n\n    .palette li {\n        display: inline-block;\n    }\n\n    li.spacer {\n        margin-left: 10px;\n    }\n</style>\n","<Editor />\n\n<style>\n    :global(html,body) {\n        height: 100%;\n        margin: 0;\n        padding: 0;\n    }\n</style>\n\n<script>\n    import Editor from './Editor';\n</script>"],"sourceRoot":""}